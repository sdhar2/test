<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan-CDCaaS" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="******" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script"></stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group - non-GUI mode" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1439408841000</longProp>
        <longProp name="ThreadGroup.end_time">1439408841000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - Initialize non-GUI mode" enabled="true">
          <stringProp name="BeanShellSampler.query">props.setProperty(&quot;stopTest&quot;,&quot;false&quot;);
//
// setup siteName for log file
//
vars.put(&quot;siteName&quot;,&quot;ACP Continuous Deployment Set&quot;);
props.setProperty(&quot;siteName&quot;,vars.get(&quot;siteName&quot;));
props.setProperty(&quot;serverSite&quot;,vars.get(&quot;siteName&quot;));
//
// Setup username and password
//
props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);
vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));

// Indicate that no GUI tests to be run
//
props.setProperty(&quot;GUI_mode&quot;,&quot;false&quot;);
//log.info(&quot;Successfully executed JMter from linux command line&quot;);
vars.put(&quot;severSite&quot;,&quot;ACP&quot;);
log.info(&quot;Using defaultDNSzone &quot; + props.getProperty(&quot;defaultDNSzone&quot;));
 
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="*****" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script"></stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="****GUI TESTING ONLY COMMENT OUT BEFORE DEPLOYING ********* SetUp Thread Group - non-GUI mode" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1439408841000</longProp>
        <longProp name="ThreadGroup.end_time">1439408841000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - clear log area and Results Tree(s)" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.gui.GuiPackage;
import org.apache.jmeter.gui.JMeterGUIComponent;
import org.apache.jmeter.gui.tree.JMeterTreeNode;
import org.apache.jmeter.samplers.Clearable;

log.info(&quot;Clearing All ...&quot;);

guiPackage = GuiPackage.getInstance();

guiPackage.getMainFrame().clearData();
for (JMeterTreeNode node : guiPackage.getTreeModel().getNodesOfType(Clearable.class)) {
    JMeterGUIComponent guiComp = guiPackage.getGui(node.getTestElement());
    if (guiComp instanceof Clearable){
        Clearable item = (Clearable) guiComp;
        try {
            item.clearData();
        } catch (Exception ex) {
            log.error(&quot;Can&apos;t clear: &quot;+node+&quot; &quot;+guiComp, ex);
        }
    }
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="****TESTING ONLY COMMENT OUT BEFORE DEPLOYING *********BeanShell Sampler - Initialize non-GUI mode " enabled="true">
          <stringProp name="BeanShellSampler.query">
//
// Indicate that GUI tests are to be run
//
props.setProperty(&quot;GUI_mode&quot;,&quot;true&quot;);

props.setProperty(&quot;stopTest&quot;,&quot;false&quot;);
props.setProperty(&quot;dockerRepoNode&quot;,&quot;10.10.45.54&quot;); 
//
// setup siteName for log file
//
vars.put(&quot;siteName&quot;,&quot;ACP Continuous Deployment Set&quot;);
props.setProperty(&quot;siteName&quot;,vars.get(&quot;siteName&quot;));
props.setProperty(&quot;serverSite&quot;,vars.get(&quot;siteName&quot;));
//
// Setup username and password
//
props.setProperty(&quot;username&quot;,&quot;fldengr&quot;);
props.setProperty(&quot;password&quot;,&quot;Only4Support&quot;);
vars.put(&quot;sshIP&quot;,props.getProperty(&quot;dockerRepoNode&quot;));




log.info(&quot;Successfully executed JMter from linux command line&quot;);
vars.put(&quot;severSite&quot;,&quot;Set Linux Test&quot;);


</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="*****" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script"></stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1445439374000</longProp>
        <longProp name="ThreadGroup.end_time">1445439374000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Revision History" enabled="true">
          <stringProp name="TestPlan.comments">Revision History</stringProp>
          <stringProp name="BeanShellSampler.query">// Tests created by Karuna Gaur
// Check CDC is running on the VM Node.
// Verify the log folder created under /var/opt/code_controller/logs/application.log
// Get the file from the dockerrepo /home/docker/cloud-service-scripts/playbooks/IT to node 1 directory: /var/opt/code_controller/releases
// Verify that the application.log have &quot;info: =======Web Service Starts========&quot;
// Get the file name from the directory: /var/opt/code_controller/releases
// Verify CDC install REST API call
// Check images are created after CDC install REST API call
// Check all folders are created after CDC install REST API call
// Check the version folder is created after CDC install REST API call
// Run &amp; verify the deploy PUT REST API Call
// Verify the REST url - response
// Check the code_controller folder is created 
// Check that all the folders under code_controller are created 
// Get the Version file under Code-Controller folder
// Check containers running on the resource nodes

//**********************************************************************************************
// Verify CDC GET API
//Get CDC Release
//Get CDC Install
//Get CDC Deploy
//Get CDC Install Release List
//Get CDC Deploy Release List</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set serviceName = CDCaaS" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;serviceName&quot;,&quot;CDCaaS&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell  -get timestamp" enabled="true">
          <stringProp name="TestPlan.comments">timestamp to display in results tree</stringProp>
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

Date now = new Date(); // get current time

SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy h:mm:ss a&quot;);     
String myStartdate = sdf.format(now); // format date as string
vars.put(&quot;myStartdate&quot;,myStartdate); // save date to JMeter variable named &quot;mydate&quot;</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - Initialize Common items" enabled="true">
          <stringProp name="BeanShellSampler.query">
int testsTotal = 0;
int testsPassed = 0;
int testsFailed = 0;

props.setProperty(&quot;testsTotal&quot;,testsTotal.toString());
props.setProperty(&quot;testsPassed&quot;,testsPassed.toString());
props.setProperty(&quot;testsFailed&quot;,testsFailed.toString());


</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** " enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** CDCaaS - Code Controller as a Service *****" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;*****************************************************&quot;);
log.info(&quot;CDCaaS : Code Controller as a Service&quot;);
log.info(&quot;-&quot;);
log.info(&quot;Start test for &quot; + props.getProperty(&quot;siteName&quot;) + &quot; at &quot; + vars.get(&quot;myStartdate&quot;));
log.info(&quot;______________________________________________________&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check CDC is running on VM Node" enabled="true">
          <stringProp name="TestPlan.comments">check CDC is running on the VM Node</stringProp>
        </GenericController>
        <hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command-/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} cdc --list-hosts 2&gt;&amp;1" enabled="true">
            <stringProp name="TestPlan.comments">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} cdc --list-hosts 2&gt;&amp;1</stringProp>
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} cdc --list-hosts 2&gt;&amp;1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CDC_Node</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-acpNode" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CDC_Node</stringProp>
              <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noInventory</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">acpNode</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- cdc node" enabled="true">
              <stringProp name="TestPlan.comments">check for zip file</stringProp>
              <stringProp name="BeanShellAssertion.query">
 //String cdc_node = vars.get(&quot;CDC_Node&quot;);

 log.info(&quot;Log file : &quot; + vars.get(&quot;CDC_Node_1&quot;));
 props.setProperty(&quot;CDC_Node&quot;,vars.get(&quot;CDC_Node_1&quot;));
//${__property(CDC_Node,)}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor-Identify Single/ 8 VM ACP" enabled="false">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//ntpstat_sync_value = vars.get(&quot;ntpstat_time_correct_value&quot;);
//int syncVal = Integer.parseInt(ntpstat_sync_value);
zknumNodes = vars.get(&quot;acpNode&quot;);
int zkNode_n = Integer.parseInt(zknumNodes);

//int zknumNodes = Integer.parseInt(vars.get(&quot;acpNode&quot;).trim());
//loginfo(&quot;numNodes :&quot; + $(numNodes});
//int zknumNodes = vars.get(&quot;acpNode&quot;);

if ( zkNode_n &gt; 1 ) {
    log.info(&quot;8 VM ACP&quot;);
            props.setProperty(&quot;SingleVMACP&quot;, &quot;false&quot;);
}
if ( zkNode_n == 1  ) {
    log.info(&quot;Single VM ACP &quot;);
            props.setProperty(&quot;SingleVMACP&quot;, &quot;true&quot;);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell -AssertionBeanShell PostProcessor-Identify Single/ 8 VM ACP" enabled="false">
              <stringProp name="BeanShellAssertion.query">zknumNodes = vars.get(&quot;acpNode&quot;);
//int zkNode_n = Integer.parseInt(zknumNodes);

//int zknumNodes = Integer.parseInt(vars.get(&quot;acpNode&quot;).trim());
//loginfo(&quot;numNodes :&quot; + $(numNodes});
//int zknumNodes = vars.get(&quot;acpNode&quot;);

if ( ${zknumNodes} &gt; 1 ) {
    log.info(&quot;8 VM ACP&quot;);
            props.setProperty(&quot;SingleVMACP&quot;, &quot;false&quot;);
}
if ( ${zknumNodes} == 1  ) {
    log.info(&quot;Single VM ACP &quot;);
            props.setProperty(&quot;SingleVMACP&quot;, &quot;true&quot;);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler  -set Test Name for CDC is running on the Docker VM" enabled="true">
            <stringProp name="TestPlan.comments">sudo docker ps</stringProp>
            <stringProp name="BeanShellSampler.query">//Set testName = sudo docker ps
 
testName=&quot;sudo docker ps | grep cdc_1&quot; ;


vars.put(&quot;testName&quot;,testName);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  sudo docker ps for CDC" enabled="true">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">${testName}</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract Container ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sudo_docker_ps_return_containerId</stringProp>
              <stringProp name="RegexExtractor.regex">\w+\d+\s+\w+\:\d+\/\w+\/\w+\-\w+\-\w+\-\w+\-\w+\-\w+\:\d+\.\d+\.\d+\.\d+\s+&quot;\/\w+\/\w+\s+\-\w+\s+\/\w+&quot;\s+\d+\s+\w+\s+\w+\s+\w+\s+\d+\s+\w+\s+\d+\.\d+\.\d+\.\d+\:\d+\-&gt;\d+\/\w+\s+(compose_cdc_1)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">extract Container ID</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for CDC Container" enabled="false">
              <stringProp name="TestPlan.comments">check for CDC Container</stringProp>
              <stringProp name="BeanShellAssertion.query">
 
container_id = vars.get(&quot;sudo_docker_ps_return_containerId&quot;);
 log.info(&quot;sudo docker ps return Container ID:&quot; + vars.get(&quot;sudo_docker_ps_return_containerId&quot;));

if(container_id.indexOf(&quot;compose_cdc_1&quot;) != -1) {
	Failure = false;
	log.info(&quot;ContainerId check Passed&quot;);
	
}
else {
	Failure = true;
	FailureMessage = &quot;CDC container is not running &quot;;
	log.info(&quot;CDC Container check Failed&quot;);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract Container ID" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1385884263">compose_cdc_1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract Image" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sudo_docker_ps_return_image</stringProp>
              <stringProp name="RegexExtractor.regex">\w+\s+\w+\:\d+\/(\w+\/\w+\-\w+\-\w+\-codecontroller)\:\d+\.\d+\.\d+\.\d+</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">ZooKeeper</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for CDC Image" enabled="true">
              <stringProp name="TestPlan.comments">check for CDC Image</stringProp>
              <stringProp name="BeanShellAssertion.query">
 
container_id = vars.get(&quot;sudo_docker_ps_return_image&quot;);
 log.info(&quot;sudo docker ps return Image:&quot; + vars.get(&quot;sudo_docker_ps_return_image&quot;));

if(container_id.indexOf(&quot;arrs/arrs-cloud-base-codecontroller&quot;) != -1) {
	Failure = false;
	log.info(&quot;Image check Passed&quot;);
	
}
else {
	Failure = true;
	FailureMessage = &quot;Image check Failed &quot;;
	log.info(&quot;Image check Failed&quot;);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sudo_docker_ps_return_status</stringProp>
              <stringProp name="RegexExtractor.regex">\w+\s+\w+\:\d+\/\w+\/\w+\-\w+\-\w+\-\w+\:\d+\.\d+\.\d+\.\d+\s+&quot;\/\w+\/\w+\s+\-\w+\s+\/\w+&quot;\s+\w+\s+\w+\s+\w+\s+\w+\s+(Up)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">ZooKeeper</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for CDC Status" enabled="false">
              <stringProp name="TestPlan.comments">check for CDC Status</stringProp>
              <stringProp name="BeanShellAssertion.query"> 
container_id = vars.get(&quot;sudo_docker_ps_return_status&quot;);
 log.info(&quot;sudo docker ps return status:&quot; + vars.get(&quot;sudo_docker_ps_return_status&quot;));

if(container_id.indexOf(&quot;Up&quot;) != -1) {
	Failure = false;
	log.info(&quot;Status check Passed&quot;);
	
}
else {
	Failure = true;
	FailureMessage = &quot;Status check Failed &quot;;
	log.info(&quot;Status check Failed&quot;);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract Container ID" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2747">Up</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract UP" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sudo_docker_ps_return_containerId</stringProp>
              <stringProp name="RegexExtractor.regex">(\w+)\s+\w+\/\w+\-\w+\-\w+\-\w+\:\d+\.\d+\.\d+\.\d+\s+&quot;\/\w+\/\w+\s+\-\w+\s+\/\w+\s+\d+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\w+\s+\d+\.\d+\.\d+\.\d+\:\w+\-&gt;\w+\/\w+\s+\w+</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">Logstash Forwarder is UP</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion-Check for &apos;UP&apos;" enabled="false">
              <stringProp name="BeanShellAssertion.query">//Assertion : check for &quot;Zookeeper&quot; in &quot;sudo docker ps&quot; output
QUOTE=&quot;\&quot;&quot;; 
 arrs/arrs-cloud-base-codecontroller:1.0.0.90
String lsf_output = vars.get(&quot;Zookeeper_Up&quot;);
print(&quot;Zookeeper_Up: ${Zookeeper_Up}&quot;);

if(lsf_output.indexOf(&quot;Up&quot;) != -1) {
	Failure = false;
	log.info(&quot;Zookeeper Up check Passed&quot;);
	
}
else {
	Failure = true;
	FailureMessage = &quot;Zookeeper_Up container is not up &quot;;
	log.info(&quot;Zookeeper Up check Failed&quot;);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;Check for CDC Container&quot; ;


vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Verify the log folder created under /var/opt/code_controller/logs/applicaiotn.log" enabled="true">
          <stringProp name="TestPlan.comments">Verify the log folder created under /var/opt/code_controller/logs/applicaiotn.log</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler  -set Test Name for verify the log folder created under /var/opt/code_controller/logs/applicaiotn.log" enabled="true">
            <stringProp name="TestPlan.comments">ls /var/opt/code_controller/logs/application.log</stringProp>
            <stringProp name="BeanShellSampler.query">//Set testName = ls /var/opt/code_controller/logs/application.log
 
testName=&quot;ls /var/opt/code_controller/logs/application.log&quot; ;


vars.put(&quot;testName&quot;,testName);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  sudo docker ps for CDC" enabled="true">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">${testName}</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract Container ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">log_file</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">extract Container ID</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- Check for CDC Container" enabled="true">
              <stringProp name="TestPlan.comments">Check for CDC Container</stringProp>
              <stringProp name="BeanShellAssertion.query">
 application_log_file = vars.get(&quot;log_file&quot;);

 log.info(&quot;Log file : &quot; + vars.get(&quot;log_file&quot;));
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract Container ID" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1847979151">(?i)application.log</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
//testName=&quot;grep info: =======Web Service Starts========&quot; ;


//vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler  -set Test Name for verify the log folder created under /var/opt/code_controller/logs/applicaiotn.log" enabled="false">
            <stringProp name="TestPlan.comments">ls /var/opt/code_controller/logs/application.log</stringProp>
            <stringProp name="BeanShellSampler.query">//Set testName = ls /var/opt/code_controller/logs/application.log
 
testName=&quot;grep -r &quot;info: =======Web Service Starts======== /var/opt/code_controller/logs/application.log&quot; ;


vars.put(&quot;testName&quot;,testName);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  grep info: =======Web Service Starts========" enabled="true">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">grep -r &quot;info: =======Web Service Starts========&quot; /var/opt/code_controller/logs/application.log</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-grep info: =======Web Service Starts========" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">log_file_grep</stringProp>
              <stringProp name="RegexExtractor.regex">\-\s+(info\:\s+\=\=\=\=\=\=\=Web\s+Service\s+Starts\=\=\=\=\=\=\=\=)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">grep info: =======Web Service Starts========</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion-grep info: =======Web Service Starts========" enabled="true">
              <stringProp name="TestPlan.comments">grep info: =======Web Service Starts========</stringProp>
              <stringProp name="BeanShellAssertion.query">
 application_log_file = vars.get(&quot;log_file_grep&quot;);

 log.info(&quot;Log file contains : &quot; + vars.get(&quot;log_file_grep&quot;));
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - grep " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-526911878">(?i)info: =======Web Service Starts========</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;grep info: =======Web Service Starts========&quot; ;


vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Get the file from the dockerrepo /home/docker/cloud-service-scripts/playbooks/IT to node 1 directory: /var/opt/code_controller/releases" enabled="true">
          <stringProp name="TestPlan.comments">Get the file from the dockerrepo /home/docker/cloud-service-scripts/playbooks/IT to node 1 directory: /var/opt/code_controller/releases</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - cp /home/docker/cloud-service-scripts/playbooks/IT/acptestapp-b-1.0.5.zip fldengr@${__property(CDC_Node,)}:/home/fldengr" enabled="true">
            <stringProp name="TestPlan.comments">scp /home/docker/cloud-service-scripts/playbooks/IT/acptestapp-b-1.0.5.zip fldengr@${__property(CDC_Node,)}:/home/fldengr</stringProp>
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">scp /home/docker/cloud-service-scripts/playbooks/IT/acptestapp-b-1.0.5.zip fldengr@${__property(CDC_Node,)}:/home/fldengr</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  sudo cp /home/fldengr/acptestapp-b-1.0.5.zip /var/opt/code_controller/releases/" enabled="true">
            <stringProp name="TestPlan.comments">sudo cp /home/fldengr/acptestapp-b-1.0.5.zip /var/opt/code_controller/releases/</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">sudo cp /home/fldengr/acptestapp-b-1.0.5.zip /var/opt/code_controller/releases/</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Get the file name from the directory: /var/opt/code_controller/releases" enabled="true">
          <stringProp name="TestPlan.comments">Get the file name from the directory: /var/opt/code_controller/releases</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  ls /var/opt/code_controller/releases/*.zip|awk -F&quot;/&quot; &apos;{print $NF}&apos;" enabled="true">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">5000000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">ls /var/opt/code_controller/releases/*.zip -t| head -n1 |awk -F&quot;/&quot; &apos;{print $NF}&apos;</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract zip file" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">zip_file</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">extract zip file</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for zip file" enabled="true">
              <stringProp name="TestPlan.comments">check for zip file</stringProp>
              <stringProp name="BeanShellAssertion.query">
 String acp_zip_file = vars.get(&quot;zip_file&quot;);

 log.info(&quot;zip file : &quot; + vars.get(&quot;zip_file&quot;));
 props.setProperty(&quot;Zip_File&quot;,vars.get(&quot;zip_file&quot;));
//${__property(Zip_File,)}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract zip file" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-178457366">(?i).zip</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;grep zip file&quot; ;


vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller- Verify CDC install REST API call" enabled="true">
          <stringProp name="TestPlan.comments">Verify CDC install REST API call
 </stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-CDC install REST API call" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__property(CDC_Node,)}</stringProp>
            <stringProp name="HTTPSampler.port">9087</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cdcaas/v1.0/install?file=${__property(Zip_File,)}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">CDC install REST API call</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Verify CDC install REST API call-201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify CDC install REST API call-201</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;Install Application POST&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check images are created after CDC install REST API call" enabled="true">
          <stringProp name="TestPlan.comments">Check images are created after CDC install REST API call</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  get the filename" enabled="true">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">ls /var/opt/code_controller/releases/ -t | head -n1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- images created after CDC install REST API call" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">filename</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments"> images created after CDC install REST API call</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- get the filename" enabled="true">
              <stringProp name="TestPlan.comments"> get the filename</stringProp>
              <stringProp name="BeanShellAssertion.query">
String Filename = vars.get(&quot;filename&quot;);
 log.info(&quot;Filename :&quot; + vars.get(&quot;filename&quot;));

  props.setProperty(&quot;FileName&quot;,vars.get(&quot;filename&quot;));
//${__property(FileName,)}
 

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract images" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-178463378">(?i).tar</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  get the version" enabled="true">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">ls /var/opt/code_controller/releases/${__property(FileName,)}</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-get the Version" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">version</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">get the Version</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- get the Version" enabled="true">
              <stringProp name="TestPlan.comments"> get the Vesrion</stringProp>
              <stringProp name="BeanShellAssertion.query">
String Filename = vars.get(&quot;version&quot;);
 log.info(&quot;Version :&quot; + vars.get(&quot;version&quot;));

  props.setProperty(&quot;Version&quot;,vars.get(&quot;version&quot;));
//${__property(Version,)}
 

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract images" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-178463378">(?i).tar</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler  -set Test Name for images created after CDC install REST API call" enabled="true">
            <stringProp name="TestPlan.comments">-set Test Name for images created after CDC install REST API call</stringProp>
            <stringProp name="BeanShellSampler.query">//Set testName = ls /var/opt/code_controller/releases/acptestapp-a/1.0.1/images/arrs-acptestapp-a*
 
//FileName=&quot;ls /var/opt/code_controller/releases/vars.get(&quot;filename&quot;)/1.0.1/images/arrs-acptestapp-a*&quot; ;


//vars.put(&quot;FileName&quot;,FileName);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  -check for images created after CDC install REST API call" enabled="true">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">ls /var/opt/code_controller/releases//${filename}/${__property(Version,)}/images/*.tar</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- images created after CDC install REST API call" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CDC_images</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments"> images created after CDC install REST API call</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for CDC Images" enabled="true">
              <stringProp name="TestPlan.comments">check for CDC Images</stringProp>
              <stringProp name="BeanShellAssertion.query">
 
CDC_Images = vars.get(&quot;CDC_images&quot;);
 log.info(&quot;images created after CDC install REST API call:&quot; + vars.get(&quot;CDC_images&quot;));

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract images" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-178463378">(?i).tar</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check all folders are created after CDC install REST API call" enabled="true">
          <stringProp name="TestPlan.comments">Check al folders are created after CDC install REST API call</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  -check for folders created after CDC install REST API call" enabled="true">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">ls /var/opt/code_controller/releases//${filename}/${__property(Version,)}/</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- images created after CDC install REST API call" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CDC_folders</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments"> images created after CDC install REST API call</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for CDC Folders" enabled="true">
              <stringProp name="TestPlan.comments">check for CDC Folders</stringProp>
              <stringProp name="BeanShellAssertion.query">
 
CDC_Folders = vars.get(&quot;CDC_folders&quot;);
 log.info(&quot;Folders created after CDC install REST API call:&quot; + vars.get(&quot;CDC_folders&quot;));

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract images" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="417629603">attribution
images</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">6000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  -check for manifest file creation after CDC install REST API call" enabled="true">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command"> ls -a /var/opt/code_controller/releases//${filename}/${__property(Version,)}/*.json</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- images created after CDC install REST API call" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">manifest_file</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments"> images created after CDC install REST API call</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for CDC Folders" enabled="true">
              <stringProp name="TestPlan.comments">check for CDC Folders</stringProp>
              <stringProp name="BeanShellAssertion.query">
 
Manifest_file = vars.get(&quot;manifest_file&quot;);
 log.info(&quot;manifest_file created after CDC install REST API call:&quot; + vars.get(&quot;manifest_file&quot;));

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract images" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1068596551">manifest.json</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;CDC Folders&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check the version folder is created after CDC install REST API call" enabled="true">
          <stringProp name="TestPlan.comments">Check the version folder is created after CDC install REST API call</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  -check for folders created after CDC install REST API call" enabled="true">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">ls /var/opt/code_controller/releases//${filename}/</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- Images created after CDC install REST API call" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Version_folder</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments"> Images created after CDC install REST API call</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Version Folder" enabled="true">
              <stringProp name="TestPlan.comments">check for Version Folder</stringProp>
              <stringProp name="BeanShellAssertion.query">
 
Vesrion_Folders = vars.get(&quot;Version_folder&quot;);
 log.info(&quot;Version Folder created after CDC install REST API call:&quot; + vars.get(&quot;Version_folder&quot;));
 props.setProperty(&quot;Version_Folder&quot;,vars.get(&quot;Version_folder&quot;));
//${__property(Version_Folder,)}
 

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;CDC Folders&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller- Verify CDC Deploy REST API call" enabled="true">
          <stringProp name="TestPlan.comments">Verify CDC Deploy REST API call
 </stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-CDC Deploy REST API call" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__property(CDC_Node,)}</stringProp>
            <stringProp name="HTTPSampler.port">9087</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cdcaas/v1.0/deploy/${__property(FileName,)}/${__property(Version_Folder,)}?scale=min&amp;resources=min</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">CDC Deploy REST API call</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Verify CDC Deploy REST API call-201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify CDC Deploy REST API call-201</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;Deploy Application PUT&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check the code_controller folder is created " enabled="false">
          <stringProp name="TestPlan.comments"> Check the code_controller folder is created </stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  - check the code_controller folder is created " enabled="true">
            <stringProp name="TestPlan.comments"> check the code_controller folder is created </stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">ls /home/docker/cloud-service-scripts/</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- images created after CDC install REST API call" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">code_controller_folder</stringProp>
              <stringProp name="RegexExtractor.regex">(.code_controller)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments"> images created after CDC install REST API call</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Code_Controller_folder" enabled="true">
              <stringProp name="TestPlan.comments">check for Code_Controller_folder</stringProp>
              <stringProp name="BeanShellAssertion.query">
Code_Controller_folder = vars.get(&quot;code_controller_folder&quot;);
 //log.info(&quot;code_controller Folder is created :&quot; + vars.get(&quot;code_controller_folder&quot;));
 props.setProperty(&quot;Code_Controller_folder&quot;,vars.get(&quot;code_controller_folder&quot;));
//${__property(Code_Controller_folder,)}
 

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract images" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1244005678">code_controller</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;CDC Folders&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check that all the folders under code_controller are created " enabled="true">
          <stringProp name="TestPlan.comments">Check that all the folders under code_controller are created </stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  get the filename under folder code_controller" enabled="false">
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">ls /var/opt/code_controller/deploy/acp* -t | head -n1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- images created after CDC install REST API call" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">filename-code_controller</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments"> images created after CDC install REST API call</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- get the filename" enabled="true">
              <stringProp name="TestPlan.comments"> get the filename</stringProp>
              <stringProp name="BeanShellAssertion.query">
String filename_CC = vars.get(&quot;filename-code_controller&quot;);
 log.info(&quot;Filename under Code_controller :&quot; + vars.get(&quot;filename-code_controller&quot;));

  props.setProperty(&quot;filename-code_controller&quot;,vars.get(&quot;filename-code_controller&quot;));
//${__property(filename-code_controller,)}
 

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract images" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-178463378">(?i).tar</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  Get the Version file under Code-Controoler folder" enabled="true">
            <stringProp name="TestPlan.comments">Get the Version file under Code-Controoler folder</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">ls /var/opt/code_controller/deploy/${__property(FileName,)} -t | head -n1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- Get the Version file under Code-Controoler folder" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Version_folder</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">Get the Version file under Code-Controoler folder</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Code_Controller_folder" enabled="true">
              <stringProp name="TestPlan.comments">check for Code_Controller_folder</stringProp>
              <stringProp name="BeanShellAssertion.query">
Code_Controller_Version_folder = vars.get(&quot;Version_folder&quot;);
 log.info(&quot;code_controller Version_folder is created :&quot; + vars.get(&quot;Version_folder&quot;));
 props.setProperty(&quot;Version_folder&quot;,vars.get(&quot;Version_folder&quot;));
//${__property(Version_folder,)}
 

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract images" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ${__property(dockerRepoNode,)}-  Get all the folders under Version folder" enabled="true">
            <stringProp name="TestPlan.comments">Get all the folders under Version folder</stringProp>
            <stringProp name="hostname">${__property(CDC_Node,)}</stringProp>
            <intProp name="port">22</intProp>
            <intProp name="connectionTimeout">500000</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="command">ls /var/opt/code_controller/deploy/${__property(FileName,)}/${__property(Version_folder,)} -t | head -n1</stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <boolProp name="printStdErr">false</boolProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- Get the Version file under Code-Controoler folder" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Under_Version_folder</stringProp>
              <stringProp name="RegexExtractor.regex">(playbooks)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">Get the Version file under Code-Controoler folder</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Code_Controller_folder" enabled="true">
              <stringProp name="TestPlan.comments">check for Code_Controller_folder</stringProp>
              <stringProp name="BeanShellAssertion.query">Under_Version_folder = vars.get(&quot;Under_Version_folder&quot;);
 log.info(&quot;Folders under Version_folder are:&quot; + vars.get(&quot;Under_Version_folder&quot;));
 props.setProperty(&quot;Under_Version_folder&quot;,vars.get(&quot;Under_Version_folder&quot;));
//${__property(Under_Version_folder,)}
 

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract folders under Version Folder" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1874888714">playbooks</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- Get the Version file under Code-Controoler folder" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Under_Version1_folder</stringProp>
              <stringProp name="RegexExtractor.regex">(playbooks)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">Get the Version file under Code-Controoler folder</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Code_Controller_folder" enabled="true">
              <stringProp name="TestPlan.comments">check for Code_Controller_folder</stringProp>
              <stringProp name="BeanShellAssertion.query">Under_Version_folder = vars.get(&quot;Under_Version1_folder&quot;);
 log.info(&quot;Folders under Version_folder are:&quot; + vars.get(&quot;Under_Version1_folder&quot;));
 props.setProperty(&quot;Under_Version_folder&quot;,vars.get(&quot;Under_Version1_folder&quot;));
//${__property(Under_Version_folder,)}
 

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- Get the Version file under Code-Controoler folder" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Under_Version2_folder</stringProp>
              <stringProp name="RegexExtractor.regex">(synapse)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">Get the Version file under Code-Controoler folder</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract folders under Version Folder" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1874888714">playbooks</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Code_Controller_folder" enabled="false">
              <stringProp name="TestPlan.comments">check for Code_Controller_folder</stringProp>
              <stringProp name="BeanShellAssertion.query">Under_Version_folder = vars.get(&quot;Under_Version2_folder&quot;);
 log.info(&quot;Folders under Version_folder are:&quot; + vars.get(&quot;Under_Version2_folder&quot;));
 props.setProperty(&quot;Under_Version_folder&quot;,vars.get(&quot;Under_Version2_folder&quot;));
//${__property(Under_Version_folder,)}
 

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - extract folders under Version Folder" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1742543479">synapse</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;CDC Folders&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - /usr/bin/ansible -i //home/docker/cloud-service-scripts/playbooks/inventory.resources swarm --list-hosts 2&gt;&amp;1" enabled="true">
          <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
          <intProp name="port">22</intProp>
          <intProp name="connectionTimeout">5000000</intProp>
          <stringProp name="username">${__property(username,)}</stringProp>
          <stringProp name="password">${__property(password,)}</stringProp>
          <stringProp name="sshkeyfile"></stringProp>
          <stringProp name="passphrase"></stringProp>
          <stringProp name="command">/usr/bin/ansible -i //home/docker/cloud-service-scripts/playbooks/inventory.resources swarm --list-hosts 2&gt;&amp;1</stringProp>
          <boolProp name="useReturnCode">false</boolProp>
          <boolProp name="printStdErr">false</boolProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">swarmResourceList</stringProp>
            <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">not_defined</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - For each IP in the Inventory.resource file create the Node alias" enabled="true">
          <stringProp name="ForeachController.inputVal">swarmResourceList</stringProp>
          <stringProp name="ForeachController.returnVal">swarmRes_host</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
          <stringProp name="TestPlan.comments">For each IP in the Inventory.resource file create the Node alias</stringProp>
        </ForeachController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">nodeNum</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="processing Node${nodeNum} : IP Address ${swarmRes_host}" enabled="true">
            <stringProp name="BeanShellSampler.query">
log.info(&quot;swarm resource VM Node&quot;+vars.get(&quot;nodeNum&quot;) + &quot; IP Address: &quot; + vars.get(&quot;swarmRes_host&quot;));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller - Check containers running on the resource nodes" enabled="true">
            <stringProp name="TestPlan.comments"> Check containers running on the resource nodes</stringProp>
          </GenericController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler  -set Test Name for nerve is running on the resource nodes" enabled="true">
              <stringProp name="TestPlan.comments">set Test Name for  nerve is running on the resource nodes</stringProp>
              <stringProp name="BeanShellSampler.query">//Set testName = sudo docker ps | grep swarm
 
testName=&quot;sudo docker ps | grep nerve&quot; ;


vars.put(&quot;testName&quot;,testName);

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command- Check dockerrepo:5000/arrs/arrs-cloud-base-nerve is running on the resource nodes" enabled="true">
              <stringProp name="TestPlan.comments">Check dockerrepo:5000/arrs/arrs-cloud-base-nerve is running on the resource nodes</stringProp>
              <stringProp name="hostname">${swarmRes_host}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">500000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">${testName}</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract : dockerrepo:5000/arrs/arrs-cloud-base-nerve" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">nerve</stringProp>
                <stringProp name="RegexExtractor.regex">\w+\:\d+\/\w+\/\w+\-\w+\-\w+\-(nerve)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments"> extract : dockerrepo:5000/arrs/arrs-cloud-base-nerve</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - Find if Nerve is running on the Resource Node" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">docker_ps_output = vars.get(&quot;nerve&quot;);


if(docker_ps_output.indexOf(&quot;nerve&quot;) != -1) {
	//Failure = false;
	log.info(&quot;Nerve is runing on the Resource VM&quot;);
	
}
else {
	//Failure = true;
	//FailureMessage = &quot;Nerve is not runing on the Resource VM. Proceed to the next VM &quot;;
	log.info(&quot;Nerve is not runing on the Resource VM. Proceed to the next VM&quot;);
	
}










</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command- Check acptestapp-a-head is running on the resource nodes" enabled="true">
              <stringProp name="TestPlan.comments">Check acptestapp-a-head is running on the resource nodes</stringProp>
              <stringProp name="hostname">${swarmRes_host}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">500000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">sudo docker ps | grep head</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract : dockerrepo:5000/arrs/acptestapp-a-head" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">head</stringProp>
                <stringProp name="RegexExtractor.regex">\w+\:\d+\/\w+\/\w+\-\w+\-(head)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments"> extract : dockerrepo:5000/arrs/acptestapp-a-head</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - Find if dockerrepo:5000/arrs/acptestapp-a-head is running on the Resource Node" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">docker_ps_output1 = vars.get(&quot;head&quot;);


if(docker_ps_output1.indexOf(&quot;head&quot;) != -1) {
	//Failure = false;
	log.info(&quot;dockerrepo:5000/arrs/acptestapp-a-head is runing on the Resource VM&quot;);
	
}
else {
	//Failure = true;
	//FailureMessage = &quot;Nerve is not runing on the Resource VM. Proceed to the next VM &quot;;
log.info(&quot;dockerrepo:5000/arrs/acptestapp-a-head is not runing on the Resource VM. Proceed to the next VM&quot;);
	
}










</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command- Check dockerrepo:5000/arrs/acptestapp-a-tail is running on the resource nodes" enabled="true">
              <stringProp name="TestPlan.comments">Check dockerrepo:5000/arrs/acptestapp-a-tail is running on the resource nodes</stringProp>
              <stringProp name="hostname">${swarmRes_host}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">500000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">sudo docker ps | grep tail</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract : dockerrepo:5000/arrs/acptestapp-a-tail" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">tail</stringProp>
                <stringProp name="RegexExtractor.regex">\w+\:\d+\/\w+\/\w+\-\w+\-(tail)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments"> extract : dockerrepo:5000/arrs/acptestapp-a-tail</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - Find if dockerrepo:5000/arrs/acptestapp-a-head is running on the Resource Node" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">docker_ps_output2 = vars.get(&quot;tail&quot;);


if(docker_ps_output2.indexOf(&quot;tail&quot;) != -1) {
	//Failure = false;
	log.info(&quot;dockerrepo:5000/arrs/acptestapp-a-tail is runing on the Resource VM&quot;);
	
}
else {
	//Failure = true;
	//FailureMessage = &quot;Nerve is not runing on the Resource VM. Proceed to the next VM &quot;;
log.info(&quot;dockerrepo:5000/arrs/acptestapp-a-tail is not runing on the Resource VM. Proceed to the next VM&quot;);
	
}










</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command- Check dockerrepo:5000/arrs/arrs-cloud-base-synapse-haproxy is running on the resource nodes" enabled="true">
              <stringProp name="TestPlan.comments">Check dockerrepo:5000/arrs/arrs-cloud-base-synapse-haproxy is running on the resource nodes</stringProp>
              <stringProp name="hostname">${swarmRes_host}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">500000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">sudo docker ps | grep synapse</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract : dockerrepo:5000/arrs/arrs-cloud-base-synapse-haproxy" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">synapse</stringProp>
                <stringProp name="RegexExtractor.regex">\w+\:\d+\/\w+\/\w+\-\w+\-\w+\-(synapse)\-\w+</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments"> extract :dockerrepo:5000/arrs/arrs-cloud-base-synapse-haproxy</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - Find if dockerrepo:5000/arrs/arrs-cloud-base-synapse-haproxy is running on the Resource Node" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">docker_ps_output3 = vars.get(&quot;synapse&quot;);


if(docker_ps_output3.indexOf(&quot;synapse&quot;) != -1) {
	//Failure = false;
	log.info(&quot;dockerrepo:5000/arrs/arrs-cloud-base-synapse-haproxy is runing on the Resource VM&quot;);
	
}
else {
	//Failure = true;
	//FailureMessage = &quot;Nerve is not runing on the Resource VM. Proceed to the next VM &quot;;
log.info(&quot;dockerrepo:5000/arrs/arrs-cloud-base-synapse-haproxy is not runing on the Resource VM. Proceed to the next VM&quot;);
	
}










</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command- Check dockerrepo:5000/swarm is running on the resource nodes" enabled="true">
              <stringProp name="TestPlan.comments">Check dockerrepo:5000/swarm is running on the resource nodes</stringProp>
              <stringProp name="hostname">${swarmRes_host}</stringProp>
              <intProp name="port">22</intProp>
              <intProp name="connectionTimeout">500000</intProp>
              <stringProp name="username">${__property(username,)}</stringProp>
              <stringProp name="password">${__property(password,)}</stringProp>
              <stringProp name="sshkeyfile"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="command">sudo docker ps | grep swarm</stringProp>
              <boolProp name="useReturnCode">false</boolProp>
              <boolProp name="printStdErr">false</boolProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor- extract : dockerrepo:5000/swarm" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">swarm</stringProp>
                <stringProp name="RegexExtractor.regex">\w+\:\d+\/(swarm)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments"> extract :dockerrepo:5000/swarm</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - Find if dockerrepo:5000/swarm is running on the Resource Node" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">docker_ps_output4 = vars.get(&quot;synapse&quot;);


if(docker_ps_output4.indexOf(&quot;synapse&quot;) != -1) {
	//Failure = false;
	log.info(&quot;dockerrepo:5000/swarm is runing on the Resource VM&quot;);
	
}
else {
	//Failure = true;
	//FailureMessage = &quot;Nerve is not runing on the Resource VM. Proceed to the next VM &quot;;
log.info(&quot;dockerrepo:5000/swarm is not runing on the Resource VM. Proceed to the next VM&quot;);
	
}










</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
              <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
              <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
              <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;Check for Swarm Container&quot; ;


vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller- Verify CDC GET API" enabled="true">
          <stringProp name="TestPlan.comments">Verify CDC GET API
 </stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Get CDC Release" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__property(CDC_Node,)}</stringProp>
            <stringProp name="HTTPSampler.port">9087</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">500000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cdcaas/v1.0/release</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Get CDC Release</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Verify Get CDC Release" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify Get CDC Release</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-Get CDC Release" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">response_code</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="TestPlan.comments">Get CDC Release</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Json-CDC-Release-output" enabled="true">
              <stringProp name="TestPlan.comments">check for Json-CDC-Release-output</stringProp>
              <stringProp name="BeanShellAssertion.query">String response_code = vars.get(&quot;response_code&quot;);
 log.info(&quot;response_code: &quot; + vars.get(&quot;response_code&quot;));


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-Get CDC Release" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CDC_Release</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="TestPlan.comments">Get CDC Release</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Json-CDC-Release-output" enabled="true">
              <stringProp name="TestPlan.comments">check for Json-CDC-Release-output</stringProp>
              <stringProp name="BeanShellAssertion.query">String CDC_Release = vars.get(&quot;CDC_Release&quot;);
 log.info(&quot;Json_CDC_Release_output: &quot; + vars.get(&quot;CDC_Release&quot;));


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;Get CDC Release&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Get CDC Install" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__property(CDC_Node,)}</stringProp>
            <stringProp name="HTTPSampler.port">9087</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">500000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cdcaas/v1.0/install/${__property(FileName,)}/${__property(Version_Folder,)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Get CDC Install</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Verify Get CDC Install" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify CDC GET APIGet CDC Install</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-Get CDC Install" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Install_output</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="TestPlan.comments">Get CDC Install</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Json-Install-output" enabled="true">
              <stringProp name="TestPlan.comments">check for Json Output</stringProp>
              <stringProp name="BeanShellAssertion.query">
String Install_output = vars.get(&quot;Install_output&quot;);
 log.info(&quot;Json-Install-output:&quot; + vars.get(&quot;Install_output&quot;));

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;Get CDC Install&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Get CDC Deploy" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__property(CDC_Node,)}</stringProp>
            <stringProp name="HTTPSampler.port">9087</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">500000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cdcaas/v1.0/deploy/${__property(FileName,)}/${__property(Version_Folder,)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Get CDC Deploy</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Verify Get CDC Deploy" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify Get CDC Deploy</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-Get CDC Deploy" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Deploy_output</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="TestPlan.comments">Get CDC Deploy</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Json-Deploy-output" enabled="true">
              <stringProp name="TestPlan.comments">check for Json Output</stringProp>
              <stringProp name="BeanShellAssertion.query">
  String Deploy_output = vars.get(&quot;Deploy_output&quot;);
 log.info(&quot;Deploy_output: &quot; + vars.get(&quot;Deploy_output&quot;));

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-Get CDC Release" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">response_code2</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="TestPlan.comments">Get CDC Release</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Json-CDC-Release-output" enabled="false">
              <stringProp name="TestPlan.comments">check for Json-CDC-Release-output</stringProp>
              <stringProp name="BeanShellAssertion.query">String response_code2 = vars.get(&quot;response_code2&quot;);
 log.info(&quot;response_code2: &quot; + vars.get(&quot;response_code2&quot;));


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;Get CDC Deploy&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Get CDC Install Release List" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__property(CDC_Node,)}</stringProp>
            <stringProp name="HTTPSampler.port">9087</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">500000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cdcaas/v1.0/install/${__property(FileName,)}/${__property(Version_Folder,)}?allAttempts=true&amp;uninstallations=true</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Get CDC Install Release List</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Verify Get CDC Install Release List" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify CDC GET Get CDC Install Release List</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-Get CDC Install  Release List" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Install_Release_list_output</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="TestPlan.comments">Get CDC Install  Release List</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Json-Install-Release-list-output" enabled="true">
              <stringProp name="TestPlan.comments">check for Json Output</stringProp>
              <stringProp name="BeanShellAssertion.query">
  String list_output = vars.get(&quot;Install_Release_list_output&quot;);
 log.info(&quot;Install_Release_list_output: &quot; + vars.get(&quot;Install_Release_list_output&quot;));

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-Get CDC Release" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">response_code3</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="TestPlan.comments">Get CDC Release</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Json-CDC-Release-output" enabled="false">
              <stringProp name="TestPlan.comments">check for Json-CDC-Release-output</stringProp>
              <stringProp name="BeanShellAssertion.query">String response_code3 = vars.get(&quot;response_code3&quot;);
 log.info(&quot;response_code3: &quot; + vars.get(&quot;response_code3&quot;));


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;Get CDC Install Release List&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Get CDC Deploy Release List" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__property(CDC_Node,)}</stringProp>
            <stringProp name="HTTPSampler.port">9087</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">500000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cdcaas/v1.0/deploy/${__property(FileName,)}/${__property(Version_Folder,)}?allAttempts=true&amp;undeployments=true</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Get CDC Deploy Release List</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Verify Get CDC Deploy Release List" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="TestPlan.comments">Verify Get CDC Deploy Release List</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-Get CDC deploy  Release List" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">deploy_release_list_output</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="TestPlan.comments">Get CDC deploy  Release List</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Json-Install-Release-list-output" enabled="true">
              <stringProp name="TestPlan.comments">check for Json Output</stringProp>
              <stringProp name="BeanShellAssertion.query">
String release_list_output = vars.get(&quot;deploy_release_list_output&quot;);
 log.info(&quot;deploy_release_list_output: &quot; + vars.get(&quot;deploy_release_list_output&quot;));

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-Get CDC Release" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">response_code4</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="TestPlan.comments">Get CDC Release</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion- check for Json-CDC-Release-output" enabled="false">
              <stringProp name="TestPlan.comments">check for Json-CDC-Release-output</stringProp>
              <stringProp name="BeanShellAssertion.query">String response_code4 = vars.get(&quot;response_code4&quot;);
 log.info(&quot;response_code4: &quot; + vars.get(&quot;response_code4&quot;));


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;
testName=&quot;Get CDC Deploy Release List&quot;;

vars.put(&quot;testName&quot;,testName);

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug SamplerCDCaas Post Run" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell  -get timestamp" enabled="true">
          <stringProp name="TestPlan.comments">timestamp to display in results tree</stringProp>
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

Date now = new Date(); // get current time

SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy h:mm:ss a&quot;);     
String myEnddate = sdf.format(now); // format date as string
vars.put(&quot;myEnddate&quot;,myEnddate); // save date to JMeter variable named &quot;mydate&quot;</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END CDCaas - CDCas Site Name = ${__property(serverSite,)} at ${myEnddate}" enabled="true">
          <stringProp name="TestPlan.comments">display siteName and Start time </stringProp>
          <stringProp name="BeanShellSampler.query">log.info(&quot;**********&quot;);
log.info(&quot;End of test for CDCaas&quot; + props.getProperty(&quot;siteName&quot;) + &quot; at &quot; + vars.get(&quot;myEnddate&quot;));
log.info(&quot;**********&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell - Display Summary " enabled="true">
          <stringProp name="TestPlan.comments"> Display Summary </stringProp>
          <stringProp name="BeanShellSampler.query">// **
// ** Display Summary
//**
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
totalTestCount = props.getProperty(&quot;testsTotal&quot;);
passedTestCount = props.getProperty(&quot;testsPassed&quot;);
failedTestCount = props.getProperty(&quot;testsFailed&quot;);

log.info(&quot;===================================================================================&quot;);
log.info(&quot;================================= RESULTS SUMMARY =================================&quot;);
log.info(PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + passedTestCount + &quot; tests PASSED , &quot; + failedTestCount + &quot; tests FAILED , out of &quot; + totalTestCount );
log.info(&quot;===================================================================================&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
