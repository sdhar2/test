<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment - DBaaS - Database as a Service" enabled="true"/>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set serviceName = DBaaS" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;serviceName&quot;,&quot;DBaaS&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell  -get timestamp" enabled="true">
          <stringProp name="TestPlan.comments">timestamp to display in results tree</stringProp>
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

Date now = new Date(); // get current time

SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy h:mm:ss a&quot;);     
String myStartdate = sdf.format(now); // format date as string
vars.put(&quot;myStartdate&quot;,myStartdate); // save date to JMeter variable named &quot;mydate&quot;</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BEGIN DBaaS - Database as a Service for Site Name = ${__property(serverSite,)} at ${myStartdate}" enabled="true">
          <stringProp name="TestPlan.comments">display siteName and Start time </stringProp>
          <stringProp name="BeanShellSampler.query">//log.info(&quot;**********&quot;);
//log.info(&quot;Start of test for DBaaS - Database as as Service for &quot; + props.getProperty(&quot;siteName&quot;) + &quot; at &quot; + vars.get(&quot;myStartdate&quot;));
//log.info(&quot;**********&quot;); </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="***** DBaaS - Database as a Service *****" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;*****************************************************&quot;);
log.info(&quot;DBaaS : Database as a Service&quot;);
log.info(&quot;-&quot;);
log.info(&quot;Start of test for &quot; + props.getProperty(&quot;siteName&quot;) + &quot; at &quot; + vars.get(&quot;myStartdate&quot;));
log.info(&quot;______________________________________________________&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="true">
          <stringProp name="BeanShellSampler.query">if ( props.getProperty(&quot;inventoryFile&quot;) != null) {
   inventoryFileName = props.getProperty(&quot;inventoryFile&quot;);
}
else {
	
	inventoryFileName = &quot;/home/docker/cloud-service-scripts/playbooks/inventory&quot;;
}

testName=&quot; /usr/bin/ansible -i &quot; + inventoryFileName + &quot; dbaas --list-hosts 2&gt;&amp;1 &quot;;
vars.put(&quot;testName&quot;,testName);
 
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -  ${__property(dockerRepoNode,)} - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} dbaas --list-host 2&gt;&amp;1" enabled="false">
          <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
          <intProp name="port">22</intProp>
          <stringProp name="username">${__property(username,)}</stringProp>
          <stringProp name="password">${__property(password,)}</stringProp>
          <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} dbaas --list-hosts 2&gt;&amp;1</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command -  ${__property(dockerRepoNode,)} - /usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} dbaas --list-host 2&gt;&amp;1" enabled="true">
          <stringProp name="command">/usr/bin/ansible -i ${__P(inventoryFile,/home/docker/cloud-service-scripts/playbooks/inventory)} dbaas --list-hosts 2&gt;&amp;1</stringProp>
          <intProp name="connectionTimeout">5000</intProp>
          <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
          <stringProp name="passphrase"></stringProp>
          <stringProp name="password">${__property(password,)}</stringProp>
          <intProp name="port">22</intProp>
          <boolProp name="printStdErr">false</boolProp>
          <stringProp name="sshkeyfile"></stringProp>
          <boolProp name="useReturnCode">false</boolProp>
          <stringProp name="username">${__property(username,)}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">DBaaSHostList</stringProp>
            <stringProp name="RegexExtractor.regex">(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">not_defined</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - - set status = FAILED" enabled="true">
            <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
          <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
          <stringProp name="BeanShellSampler.query">//if ( props.getProperty(&quot;inventoryFile&quot;) != null) {
//   inventoryFileName = props.getProperty(&quot;inventoryFile&quot;);
//}
//else {
//	inventoryFileName = &quot;/home/docker/cloud-service-scripts/playbooks/inventory&quot;;
//}

//testName=&quot; /usr/bin/ansible -i &quot; + inventoryFileName + &quot; dbaas --list-hosts 2&gt;&amp;1 &quot;;

//log.info(${__P(LOGMARKER,__ACP__)} + testName + status );


SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - for each IP in the Inventory file create the Node alias" enabled="true">
          <stringProp name="ForeachController.inputVal">DBaaSHostList</stringProp>
          <stringProp name="ForeachController.returnVal">DBaaS_host</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">nodeNum</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="processing Node${nodeNum} : IP Address ${DBaaS_host}" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info( &quot; &quot;);
log.info(&quot;======================================================================&quot;);
log.info( &quot; &quot;);
log.info(&quot;DBaaS VM Node&quot;+vars.get(&quot;nodeNum&quot;) + &quot; IP Address: &quot; + vars.get(&quot;DBaaS_host&quot;));
log.info( &quot; &quot;);
log.info(&quot;======================================================================&quot;);
log.info( &quot; &quot;);

//log.info(&quot;processing database node&quot; + ${DBaaS_host} );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="showing varible  Node_8 =  ${Node_8}" enabled="false">
            <stringProp name="BeanShellSampler.query">
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler DBaaS Pre Run" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="true">
            <stringProp name="BeanShellSampler.query">testName=&quot; uname -n &quot;;
vars.put(&quot;testName&quot;,testName);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - hostname is ${setNode}   " enabled="false">
            <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
            <stringProp name="command">uname -n</stringProp>
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - hostname is ${setNode}   " enabled="true">
            <stringProp name="command">uname -n</stringProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="hostname">${DBaaS_host}</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printStdErr">false</boolProp>
            <stringProp name="sshkeyfile"></stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">serverName</stringProp>
              <stringProp name="RegexExtractor.regex">(?:\S+ ){1}(\S+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="true">
            <stringProp name="BeanShellSampler.query">testName=&quot; host dbaascluster &quot;;
vars.put(&quot;testName&quot;,testName);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -Verify DNS has an entry for etcdcluster" enabled="false">
            <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
            <stringProp name="command">host dbaascluster</stringProp>
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dbaascluster</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dbaascluster_IP</stringProp>
              <stringProp name="RegexExtractor.regex">\d{1,3}\.\d{1,3}\d{1,3}\.\d{1,3}\.\d{1,3}</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - host dbaascluster" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-533389968">(?i)dbaascluster.${__property(defaultDNSzone,)} has address</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command -Verify DNS has an entry for etcdcluster" enabled="true">
            <stringProp name="TestPlan.comments">SSH Command -Verify DNS has an entry for etcdcluster</stringProp>
            <stringProp name="command">host dbaascluster</stringProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="hostname">${DBaaS_host}</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printStdErr">false</boolProp>
            <stringProp name="sshkeyfile"></stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dbaascluster</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dbaascluster_IP</stringProp>
              <stringProp name="RegexExtractor.regex">\d{1,3}\.\d{1,3}\d{1,3}\.\d{1,3}\.\d{1,3}</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - host dbaascluster" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-533389968">(?i)dbaascluster.${__property(defaultDNSzone,)} has address</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- host dbaascluster  = ${dbaascluster}" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="true">
            <stringProp name="BeanShellSampler.query">testName=&quot; ping -c 5 dbaascluster &quot;;
vars.put(&quot;testName&quot;,testName);
 </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command -ping dbaascluster" enabled="false">
            <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
            <stringProp name="command">ping -c 5 dbaascluster</stringProp>
            <stringProp name="hostname">${__property(dockerRepoNode,)}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dbaasclusterPingResponse</stringProp>
              <stringProp name="RegexExtractor.regex">(.*\b bytes from \b.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ping dbaascluster" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="704718701">(?i)--- dbaascluster.${__property(defaultDNSzone,)} ping statistics ---</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ping -c 5 dbaascluster" enabled="true">
            <stringProp name="command">ping -c 5 dbaascluster</stringProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="hostname">${DBaaS_host}</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printStdErr">false</boolProp>
            <stringProp name="sshkeyfile"></stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dbaasclusterPingResponse</stringProp>
              <stringProp name="RegexExtractor.regex">(.*\b bytes from \b.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not_defined</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ping dbaascluster" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="704718701">(?i)--- dbaascluster.${__property(defaultDNSzone,)} ping statistics ---</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());


</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- dbaasluster VIP = ${dbaascluster_IP}" enabled="true">
            <stringProp name="BeanShellSampler.query">//update log
log.info(&quot;dbaascluster VIP : &quot; + vars.get(&quot;dbaascluster_IP&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ping dbaascluster  ${dbaasclusterPingResponse}" enabled="true">
            <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ping dbaascluster : &quot; + vars.get(&quot;dbaasclusterPingResponse&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="true">
            <stringProp name="BeanShellSampler.query">QUOTE = &quot;\&quot;&quot; ;
testName=&quot; ps -ef| grep pgpool  | grep &quot; + QUOTE + &quot;wait for connection request = &quot; + QUOTE + &quot;  | grep -v grep | head -n 10 &quot;;
vars.put(&quot;testName&quot;,testName);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ps -ef| grep pgpool  | grep &quot;wait for connection request&quot;  | grep -v grep | head -n 10" enabled="false">
            <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
            <stringProp name="command">ps -ef| grep pgpool  | grep &quot;wait for connection request&quot;  | grep -v grep | head -n 10</stringProp>
            <stringProp name="hostname">${dbaascluster_IP}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_pgPool_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Resonse Assetion - ps -ef| grep pgpool  | grep &quot;wait for connection request&quot;  | grep -v grep | head -n 10" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1059702154">pgpool: wait for connection request</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ps -ef| grep pgpool  | grep &quot;wait for connection request&quot;  | grep -v grep | head -n 10" enabled="true">
            <stringProp name="command">ps -ef| grep pgpool  | grep &quot;wait for connection request&quot;  | grep -v grep | head -n 10</stringProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="hostname">${DBaaS_host}</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printStdErr">false</boolProp>
            <stringProp name="sshkeyfile"></stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="TestPlan.comments">${dbaascluster_IP}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_pgPool_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Resonse Assetion - ps -ef| grep pgpool  | grep &quot;wait for connection request&quot;  | grep -v grep | head -n 10" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1059702154">pgpool: wait for connection request</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;

log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="true">
            <stringProp name="BeanShellSampler.query">QUOTE = &quot;\&quot;&quot; ;
testName = &quot; ps -ef| grep pgpool  | grep -v wait | grep &quot; + QUOTE + &quot;pgpool -f &quot; + QUOTE + &quot; | grep -v grep&quot; ;
vars.put(&quot;testName&quot;,testName);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ps -ef| grep pgpool  | grep -v wait | grep &quot;pgpool -f&quot; | grep -v grep" enabled="false">
            <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
            <stringProp name="command">ps -ef| grep pgpool  | grep -v wait | grep &quot;pgpool -f&quot; | grep -v grep</stringProp>
            <stringProp name="hostname">${dbaascluster_IP}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_pgPool_process_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion -ps -ef| grep pgpool  | grep -v wait | grep &quot;pgpool -f&quot; | grep -v grep" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="309184012">pgpool -f /usr/local/etc/pgpool.conf -a /usr/local/etc/pool_hba.conf -F /usr/local/etc/pcp.conf -n -D</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ps -ef| grep pgpool  | grep -v wait | grep &quot;pgpool -f&quot; | grep -v grep" enabled="true">
            <stringProp name="command">ps -ef| grep pgpool  | grep -v wait | grep &quot;pgpool -f&quot; | grep -v grep</stringProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="hostname">${DBaaS_host}</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printStdErr">false</boolProp>
            <stringProp name="sshkeyfile"></stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="TestPlan.comments">${dbaascluster_IP}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_pgPool_process_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion -ps -ef| grep pgpool  | grep -v wait | grep &quot;pgpool -f&quot; | grep -v grep" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="309184012">pgpool -f /usr/local/etc/pgpool.conf -a /usr/local/etc/pool_hba.conf -F /usr/local/etc/pcp.conf -n -D</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ps -ef | grep pgpool = ${ps_pgPool_return}" enabled="true">
            <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ps -ef | grep pgpool : &quot; + vars.get(&quot;ps_pgPool_return&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ps -ef | grep &quot;postgres: logger&quot;" enabled="false">
            <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
            <stringProp name="command">ps -ef | grep &quot;postgres: logger&quot;</stringProp>
            <stringProp name="hostname">${dbaascluster_IP}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_PostgresLogger_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ps -ef | grep receiver" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2112450046">postgres: logger process</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="true">
            <stringProp name="BeanShellSampler.query">QUOTE = &quot;\&quot;&quot; ;
testName = &quot; ps -ef | grep &quot; + QUOTE +  &quot;postgres: logger&quot; + QUOTE;
vars.put(&quot;testName&quot;,testName);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ps -ef | grep &quot;postgres: logger&quot;" enabled="true">
            <stringProp name="command">ps -ef | grep &quot;postgres: logger&quot;</stringProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="hostname">${DBaaS_host}</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printStdErr">false</boolProp>
            <stringProp name="sshkeyfile"></stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="TestPlan.comments">${dbaascluster_IP}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_PostgresLogger_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ps -ef | grep &quot;postgres: logger&quot;" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2112450046">postgres: logger process</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ps -ef | grep pgpool = ${ps_PostgresLogger_return}" enabled="true">
            <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ps -ef | grep \&quot;postgres: logger\&quot; : &quot; + vars.get(&quot;ps_PostgresLogger_return&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller _ WILL NEED TO ADD LOGIC TO SEND COMMAND TO BACKUP WHICH IS RUNNING RECEIVER PROCESS" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="false">
            <stringProp name="BeanShellSampler.query">testName=&quot; ps -ef | grep receiver &quot;;
vars.put(&quot;testName&quot;,testName);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="false">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ps -ef | grep receiver" enabled="false">
            <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
            <stringProp name="command">ps -ef | grep receiver</stringProp>
            <stringProp name="hostname">${dbaascluster_IP}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_Receiver_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-703720037">postgres: wal receiver process</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ps -ef | grep receiver" enabled="false">
            <stringProp name="command">ps -ef | grep receiver</stringProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="hostname">${dbaascluster_IP}</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printStdErr">false</boolProp>
            <stringProp name="sshkeyfile"></stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_Receiver_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-703720037">postgres: wal receiver process</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ps -ef | grep receiver = ${ps_PostgresLogger_return}" enabled="false">
            <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ps -ef | grep reciever : &quot; + vars.get(&quot;ps_Receiver_return&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="false">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="false">
            <stringProp name="BeanShellSampler.query">
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="true">
            <stringProp name="BeanShellSampler.query">QUOTE = &quot;\&quot;&quot; ;
testName = &quot; ps -ef | grep &quot; + QUOTE +  &quot;postgres: wal&quot; + QUOTE + &quot; | grep -v grep &quot; ;
vars.put(&quot;testName&quot;,testName);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ps -ef | grep sender" enabled="true">
            <stringProp name="command">ps -ef | grep &quot;postgres: wal&quot; | grep -v grep</stringProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="hostname">${DBaaS_host}</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printStdErr">false</boolProp>
            <stringProp name="sshkeyfile"></stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="TestPlan.comments">${dbaascluster_IP}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_grep_wal_process</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ps -ef | grep sender" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1291469096">postgres: wal sender|receiver process</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ps -ef | grep sender = ${ps_PostgresLogger_return}" enabled="true">
            <stringProp name="BeanShellSampler.query">//update log
testName = &quot; ps -ef | grep &quot; + QUOTE +  &quot;postgres: wal&quot; + QUOTE + &quot; | grep -v grep &quot; ;
log.info(testName + vars.get(&quot;ps_grep_wal_process&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="false">
            <stringProp name="BeanShellSampler.query">testName=&quot; ps -ef | grep sender &quot;;
vars.put(&quot;testName&quot;,testName);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="false">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - ps -ef | grep sender" enabled="false">
            <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
            <stringProp name="command">ps -ef | grep sender</stringProp>
            <stringProp name="hostname">${dbaascluster_IP}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_Sender_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ps -ef | grep sender" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-125103327">postgres: wal sender process</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - ps -ef | grep sender" enabled="false">
            <stringProp name="command">ps -ef | grep sender</stringProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="hostname">${DBaaS_host}</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printStdErr">false</boolProp>
            <stringProp name="sshkeyfile"></stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="TestPlan.comments">${dbaascluster_IP}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ps_Sender_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ps -ef | grep sender" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-125103327">postgres: wal sender process</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="false">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="false">
            <stringProp name="BeanShellSampler.query">
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- ps -ef | grep sender = ${ps_PostgresLogger_return}" enabled="false">
            <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;ps -ef | grep sender : &quot; + vars.get(&quot;ps_Sender_return&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - set Test Name" enabled="true">
            <stringProp name="BeanShellSampler.query">testName=&quot; sudo docker ps &quot;;
vars.put(&quot;testName&quot;,testName);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - default status to PASSED" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;status&quot;,&quot; PASSED &quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command - sudo docker ps" enabled="false">
            <stringProp name="TestPlan.comments">${__property(hostNameIP,)}</stringProp>
            <stringProp name="command">sudo docker ps</stringProp>
            <stringProp name="hostname">${dbaascluster_IP}</stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <stringProp name="username">${__property(username,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sudo_docker_ps_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - sudo docker ps" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1672141480">dockerrepo:5000/arrs/arrs-cloud-base-keymanager</stringProp>
                <stringProp name="-1545474224">dockerrepo:5000/arrs/arrs-cloud-base-logstash-forwarder</stringProp>
                <stringProp name="905871821">dockerrepo:5000/arrs/arrs-cloud-base-pgpool</stringProp>
                <stringProp name="1030402478">dockerrepo:5000/arrs/arrs-cloud-base-pgpool-app-monitor</stringProp>
                <stringProp name="-407368516">dockerrepo:5000/arrs/arrs-cloud-base-app-observer</stringProp>
                <stringProp name="1559796787">dockerrepo:5000/arrs/arrs-cloud-base-postgres</stringProp>
                <stringProp name="339895060">dockerrepo:5000/arrs/arrs-cloud-base-postgres-app-monitor</stringProp>
                <stringProp name="-407368516">dockerrepo:5000/arrs/arrs-cloud-base-app-observer</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - REO" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;%%%%%%%%%%%%%%%%%%%%%%  REO %%%%%%%%%%%%%%%%%%%%%%&quot;);
 
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command - sudo docker ps" enabled="true">
            <stringProp name="command">sudo docker ps</stringProp>
            <intProp name="connectionTimeout">5000</intProp>
            <stringProp name="hostname">${DBaaS_host}</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">${__property(password,)}</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printStdErr">false</boolProp>
            <stringProp name="sshkeyfile"></stringProp>
            <boolProp name="useReturnCode">false</boolProp>
            <stringProp name="username">${__property(username,)}</stringProp>
            <stringProp name="TestPlan.comments">${__property(dockerRepoNode,)}</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor (?:\S+ ){1}(\S+)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sudo_docker_ps_return</stringProp>
              <stringProp name="RegexExtractor.regex">([\s\S]*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">noName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">(?:\S+ ){1} matches 1 word (\S+) will get the next word 
which is the servername in the following response 
&quot;Linux apiproxyt05 2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - sudo docker ps" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1672141480">dockerrepo:5000/arrs/arrs-cloud-base-keymanager</stringProp>
                <stringProp name="-1545474224">dockerrepo:5000/arrs/arrs-cloud-base-logstash-forwarder</stringProp>
                <stringProp name="905871821">dockerrepo:5000/arrs/arrs-cloud-base-pgpool</stringProp>
                <stringProp name="1030402478">dockerrepo:5000/arrs/arrs-cloud-base-pgpool-app-monitor</stringProp>
                <stringProp name="-407368516">dockerrepo:5000/arrs/arrs-cloud-base-app-observer</stringProp>
                <stringProp name="1559796787">dockerrepo:5000/arrs/arrs-cloud-base-postgres</stringProp>
                <stringProp name="339895060">dockerrepo:5000/arrs/arrs-cloud-base-postgres-app-monitor</stringProp>
                <stringProp name="-407368516">dockerrepo:5000/arrs/arrs-cloud-base-app-observer</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - log FAILURES" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">
// FAILED TESTS
vars.put(&quot;status&quot;,&quot; FAILED &quot;);

failedTests = props.getProperty(&quot;testsFailed&quot;);
int failed = Integer.parseInt(failedTests);
failed = failed + 1 ;
//failedTests  = failedTests + 1 ;
props.setProperty(&quot;testsFailed&quot;,failed.toString());

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="----- sudo docker ps = ${sudo_docker_ps_return}" enabled="true">
            <stringProp name="BeanShellSampler.query">//update log
 
log.info(&quot;sudo docker ps : &quot; + vars.get(&quot;sudo_docker_ps_return&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - log status" enabled="true">
            <stringProp name="BeanShellSampler.query">
SPACE = &quot; &quot;;
PAD = &quot;     &quot;;
COLON = &quot;:&quot;;


log.info( PAD + &quot;${__P(LOGMARKER,__ACP__)}&quot; + SPACE + vars.get(&quot;serviceName&quot;) + COLON +  SPACE + vars.get(&quot;testName&quot;) + vars.get(&quot;status&quot;) );</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - calc total Tests" enabled="true">
            <stringProp name="BeanShellSampler.query">// Increment Total Test Count
//

totalTests = props.getProperty(&quot;testsTotal&quot;);
failedTests = props.getProperty(&quot;testsFailed&quot;);
passedTests = props.getProperty(&quot;testsPassed&quot;);
  
int tot = Integer.parseInt(totalTests);
int fail = Integer.parseInt(failedTests);
tot  = tot + 1;
int passed =  tot - fail;

props.setProperty(&quot;testsTotal&quot;,tot.toString());
props.setProperty(&quot;testsPassed&quot;,passed.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="*****" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler DBaaS Post Run" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell  -get timestamp" enabled="true">
          <stringProp name="TestPlan.comments">timestamp to display in results tree</stringProp>
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

Date now = new Date(); // get current time

SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy h:mm:ss a&quot;);     
String myEnddate = sdf.format(now); // format date as string
vars.put(&quot;myEnddate&quot;,myEnddate); // save date to JMeter variable named &quot;mydate&quot;</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="END DBaaS - Database as a Service for Site Name = ${__property(serverSite,)} at ${myEnddate}" enabled="true">
          <stringProp name="TestPlan.comments">display siteName and Start time </stringProp>
          <stringProp name="BeanShellSampler.query">log.info(&quot;**********&quot;);
log.info(&quot;End of test for DBaaS - Database as as Service for &quot; + props.getProperty(&quot;siteName&quot;) + &quot; at &quot; + vars.get(&quot;myEnddate&quot;));
log.info(&quot;**********&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - GUI_mode == &quot;true&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${__property(GUI_mode,)}&quot; ==  &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - DBaaS" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
